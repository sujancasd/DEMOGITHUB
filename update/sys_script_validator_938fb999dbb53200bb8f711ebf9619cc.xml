<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_validator">
    <sys_script_validator action="INSERT_OR_UPDATE">
        <active>true</active>
        <description>validation check for date in reservation</description>
        <internal_type>glide_date</internal_type>
        <sys_class_name>sys_script_validator</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-03-28 12:23:31</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>938fb999dbb53200bb8f711ebf9619cc</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>glide_date</sys_name>
        <sys_package display_value="Hotel" source="x_111176_hotel">6ce855d8db313200bb8f711ebf9619d8</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Hotel">6ce855d8db313200bb8f711ebf9619d8</sys_scope>
        <sys_update_name>sys_script_validator_938fb999dbb53200bb8f711ebf9619cc</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-04-09 14:04:44</sys_updated_on>
        <validator><![CDATA[function validate(value) {
    // empty fields are still valid dates 
    if(!value) 
        return true; 

    // We "should" have the global date format defined always defined. but there's always that edge case... 
    if(typeof g_user_date_format !== 'undefined') 
        return isDate(value, g_user_date_format) ? true : getMessage("Invalid Date"); 

    // if we don't have that defined, we can always try guessing 
    return parseDate(value) !== null ? true : getMessage("Invalid Date"); 
	
} ]]></validator>
    </sys_script_validator>
</record_update>
